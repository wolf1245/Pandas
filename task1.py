#!/usr/bin/env python
# coding: utf-8

# # Библиотека `pandas`: часть 1
# 
# *Алла Тамбовцева*
# 
# ## Домашнее задание 
# 
# ### Описание домашнего задания и формат сдачи
# 
# В домашнем задании необходимо решить предложенные задачи по программированию – вписать свой код в ячейки после условий задач вместо комментария `### YOUR CODE HERE ###`

# ### Задание 1
# 
# Загрузить массив `NumPy` из файла `"arr_pandas.npy"` (как в задании к предыдущему модулю) и преобразовать его в датафрейм. Массив содержит данные по результатам соревнований Scottish Hill Races в 2000 году (полное описание на английском языке можно посмотреть на [странице](https://vincentarelbundock.github.io/Rdatasets/doc/DAAG/races2000.html) с документацией по исходному файлу с данными).
# 
# **Подсказка (преобразование в датафрейм):**

# In[ ]:


dat = pd.DataFrame(arr)  # arr - массив NumPy из файла


# In[13]:


import numpy as np
import pandas as pd
arr = np.load("arr_pandas.npy", allow_pickle=True)
dat = pd.DataFrame(arr)
print(dat)


# ### Задание 2
# 
# Определить, сколько в датафрейме строк и столбцов. Привести код и указать ответ в виде текста или комментария к коду.

# In[47]:


dat.shape


# ### Задание 3
# 
# Присвоить столбцам следующие названия (указаны с пояснениями): 
# 
# * `id`: id участника
# * `dist`: расстояние в милях (по карте)
# * `climb`: высота, достигнутая на маршруте (в сумме за весь маршрут, в футах)
# * `time`: время (в часах)
# * `timef`: время для женщин (в часах)
# * `type`: тип гонки (*hill*, *marathon*, *relay*, *uphill* or *other*)

# In[20]:


dat.columns = ['id', 'dist', 'climb', 'time', 'timeif', 'type']
print(dat)


# ### Задание 4
# 
# Вывести на экран значение высоты, достигнутой на маршруте участником *Norman's Law*.

# In[43]:


dat.loc[dat['id'] == "Norman's Law", "climb"]


# ### Задание 5
# Вывести на экран значения показателей `dist`, `climb` , `time` для первых 10 участников.

# In[44]:


dat[["dist", "climb", "time"]].head(10)


# ### Задание 6
# 
# Вывести на экран сводную информацию по датафрейму, которая включает типы всех столбцов. Сколько столбцов типа `float` в датафрейме? Привести ответ на вопрос в виде текста или комментария к коду.

# In[46]:


dat.info()


# ### Задание 7
# 
# Выбрать строки, которые соответствуют участникам эстафеты (*relay*).

# In[48]:


dat.loc[dat['type'] == "relay"]


# ### Задание 8
# 
# Выбрать строки, которые соответствуют участникам гонки в холмах (*hill*), которые в сумме достигли высоты более 1000 футов. Посчитать, сколько таких участников.

# In[54]:


dat.loc[(dat['type'] == "hill") & (dat['climb'] > 1000)].shape


# ### Задание 9
# 
# Выбрать строки, соответствующие участникам, которые либо достигли высоты более 4000 футов, либо потратили менее 0.5 часов.

# In[55]:


dat.loc[(dat['time'] < 0.5) | (dat['climb'] > 4000)]


# ### Задание 10
# 
# Создать столбец `time_min`, который содержит время маршрута, измеренное в минутах.

# In[57]:


dat["time_min"] = dat['time']
print(dat)


# ### Задание 11
# 
# Создать столбец `year` с годом соревнований (везде 2000 год). Внимание: столбец с годом должен быть числовым (целочисленным).

# In[60]:


dat['year'] = 2000
dat.info()


# .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> .<br> 
# # Дополнительное (необязательное) задание.
# <br>
# 
# 

# ### Задание 1
# 
# Загрузить датафрейм из файла `extraversion.csv`, используя код ниже. При этом файл `extraversion.csv` должен находиться в той же папке, что и ноутбук с решениями. Его можно поместить в ту же папку, нажав кнопку *Upload* в *Home*.

# In[ ]:


# кодировка UTF-8, чтобы кириллица корректно считывалась на Windows
ps = pd.read_csv("extraversion.csv", encoding = "UTF-8")


# Файл содержит результаты учебного психометрического исследования, целью которого является выявление связи между уровнем экстраверсии человека и его склонности к участию в волонтёрской деятельности. Датафрейм содержит следующие столбцы:
# 
# * `sex`: пол респондента (Женский, Мужской);
# * `volunteer`: регулярное участие в волонтёрской деятельности (Да, Нет);
# * `Q 1` - `Q 57`: ответы на вопросы по анкете Айзенка (Да, Нет), информацию об анкете и сами вопросы можно найти на [этой](http://ipp.hse.ru/57-testytest-ajzenka-ekstraversiya-introversiya-nejrotizm) странице.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 2
# 
# Определить, сколько в датафрейме строк и столбцов. Привести код и указать ответ в виде текста или комментария к коду.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 3
# 
# Переименовать столбцы `Q 1`-`Q 57` в `Q1`-`Q57`, другими словами, убрать в названиях всех столбцов пробелы в середине (если есть). 
# 
# **Подсказка 1:** Метод `.replace()` для строк на [pythontutor.ru](https://pythontutor.ru/lessons/str/).
# 
# **Подсказка 2:** Для выполнения этого задания можно написать функцию, которая будет заменять пробелы на «пустоту», а потом применить её с помощью функции `map()` ко всем элементам списка. Пример ниже иллюстрирует применение функции для изменения регистра текста.

# In[2]:


# Пример

L = ['яблоко', 'груша', 'слива']  # исходный список

# функция принимает на вход строку x и возвращает её же, 
# но большими буквами – метод .upper()

def f(x):
    """
    Input: x is a string.
    Output: x is a string.
    Makes all letters uppercase. 
    """
    return x.upper()

# результат: применяем функцию f к списку L через map и преобразуем в список
# можно убрать list() вначале и убедиться, что он здесь нужен

list(map(f, L))  


# In[ ]:


### YOUR CODE HERE ###


# ### Задание 4
# 
# Выбрать столбцы `Q1`, `Q3`, `Q8`, `Q10`, `Q13`, `Q17`, `Q22`, `Q25`, `Q27`, `Q39`, `Q44`, `Q46`, `Q49`, `Q53`, `Q56` и сохранить их в отдельный датафрейм `extra_yes`. 
# 
# Выбрать столбцы `Q5`, `Q15`, `Q20`, `Q29`, `Q32`, `Q34`, `Q37`,`Q41`, `Q51` и сохранить их в отдельный датафрейм `extra_no`.
# 
# Эти столбцы будут использоваться для вычисления индекса экстраверсии.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 5
# 
# Посчитать для каждой строки в датафрейме `extra_yes` число ответов `"Да"` и полученный результат сохранить в переменную `extra_yes_sum`. Посчитать для каждой строки в датафрейме `extra_no` число ответов `"Нет"` и полученный результат сохранить в переменную `extra_no_sum`.
# 
# **Подсказка 1:** метод `.isin()` для [датафреймов](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.isin.html) `pandas`.
# 
# **Подсказка 2:** метод `.sum()` для [датафреймов](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sum.html) `pandas`. 

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 6
# 
# Добавить в исходный датафрейм столбец `extra`, который представляет собой индекс экстраверсии, который считается так: сумма числа ответов "Да" в `extra_yes` и числа ответов "Нет" в `extra_no`.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 7

# Добавить в исходный датафрейм столбец `female`, состоящий из значений 0 и 1 (0 — Мужской, 1 — Женский). 
# 
# **Подсказка:** возможно, пригодится метод `.astype()` для [Series](https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Series.astype.html) в `pandas`, он преобразует типы столбцов.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 8
# 
# Выбрать из исходного датафрейма строки, которые соответствуют либо волонтёрам с индексом экстраверсии выше 15, либо не-волонтёрам с индексом экстраверсии ниже 15. Сохранить в датафрейм `pure`.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 9
# 
# Определить (любым способом, кроме явного подсчёта), сколько волонтёров и не-волонтёров в датафрейме `pure`.

# In[ ]:


### YOUR CODE HERE ###


# ### Задание 10
# 
# Определить минимальное, максимальное, среднее и медианное значение индекса экстраверсии в датафрейме `pure`. Сохранить полученные результаты в отдельные переменные (их должно быть 4).
# 
# Добавить в датафрейм `pure` столбец `high`, состоящий из 0 и 1, где 1 соответствует респондентам, уровень экстраверсии которых выше значения $m = \max\{\text{median}, \text{mean}\}$, то есть максимума из медианного и среднего значения, а 0 — респондентам с уровнем экстраверсии не выше $m$.

# In[ ]:


### YOUR CODE HERE ###

